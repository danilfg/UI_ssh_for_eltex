import sys  # sys –Ω—É–∂–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ argv –≤ QApplication
from PyQt5 import QtWidgets
import design
import paramiko
import time
import re


class ExampleApp(QtWidgets.QMainWindow, design.Ui_Dialog):
    def __init__(self):
        # –≠—Ç–æ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º, –º–µ—Ç–æ–¥–∞–º
        # –∏ —Ç.–¥. –≤ —Ñ–∞–π–ª–µ design.py
        super().__init__()
        self.setupUi(self)  # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –¥–∏–∑–∞–π–Ω–∞
        self.connectButton.pressed.connect(self.connectUI)
        self.foundID.pressed.connect(self.foundIDSHH)
        self.pushButton.pressed.connect(self.foundShortID)

    def output_message(self, message_to_ui):
        self.outputWindow.setText(message_to_ui)

    def connectUI(self):
        ip = self.domainSSH.text()
        user = self.loginSSH.text()
        password = self.passwordSSH.text()
        port = 8023
        try:
            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(
                hostname=ip,
                username=user,
                password=password,
                port=port,
                look_for_keys=False)
            with client.invoke_shell() as ssh:
                time.sleep(0.5)
                print(ssh.recv(1000).decode('utf8'))
            message_to_ui = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–¥–∞–ª–æ—Å—å."
        except:
            message_to_ui = "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏–ª–∏ –¥–æ–º–µ–Ω."

        self.output_message(message_to_ui)

    def foundIDSHH(self):
        number = self.numberSSH.text()
        domain = self.foundDomainSSH.text()
        ip = self.domainSSH.text()
        user = self.loginSSH.text()
        password = self.passwordSSH.text()
        port = 8023
        send_mes = 'domain/' + domain + '/trace/list --addr ' + number + '\n'
        try:
            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(
                hostname=ip,
                username=user,
                password=password,
                port=port,
                look_for_keys=False)
            with client.invoke_shell() as ssh:
                ssh.send(send_mes)
                time.sleep(0.5)
            message_to_ui = ssh.recv(10000).decode('utf8')
            message_to_ui = re.sub("\[\d+m", '', ''.join(message_to_ui))
        except:
            message_to_ui = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"
        self.output_message(message_to_ui)

    def foundShortID(self):
        shortID = self.shortID.text()
        domain = self.foundDomainSSH.text()
        ip = self.domainSSH.text()
        user = self.loginSSH.text()
        password = self.passwordSSH.text()
        port = 8023
        send_mes = 'domain/' + domain + '/trace/show --Te ' + shortID + ' --payload\n'
        try:
            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(
                hostname=ip,
                username=user,
                password=password,
                port=port,
                look_for_keys=False)
            with client.invoke_shell() as ssh:
                ssh.send(send_mes)
                time.sleep(0.5)
                '''ssh.recv(120).decode('utf8')'''
                message_to_ui = ssh.recv(10000000).decode("utf-8")
                message_to_ui = re.sub("\[\d+m", '', ''.join(message_to_ui))
                print(message_to_ui)
                file = open('log-' + shortID + '_' + time.strftime("%Y-%m-%d-%H.%M.%S", time.localtime()) + '.txt', 'w')
                file.write(''.join(message_to_ui))
                file.close()
        except:
            message_to_ui = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"
        print(message_to_ui)
        self.output_message(message_to_ui)


def main():
    app = QtWidgets.QApplication(sys.argv)  # –ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä QApplication
    window = ExampleApp()  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ ExampleApp
    window.show()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
    app.exec_()  # –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ


if __name__ == '__main__':  # –ï—Å–ª–∏ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
    main()  # —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main()
